Assignment

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
   try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
	docker images --help ---> This command shows all the avaialble options and commands to work with docker images
	docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers
Ans: docker -v

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
Ans: docker pull nginx

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
Ans: docker images

4. Find out the "Full" ImageId of the image that you pulled and write it below.
Ans: docker inspect f0b8a9a54136
     "Id": "sha256:f0b8a9a541369db503ff3b9d4fa6de561b300f7363920c2bff4577c6c24c5cf6"

5. Create a container of your image 
Ans: docker run -d -p 8080:80 --name My-Nginx f0b8a9a54136

6. List all the running containers
Ans: docker ps

7. List all the running and stopped containers
Ans: docker ps -a

8. Find out the "Full" containerId of the container and write it below.
Ans: docker inspect My-Nginx
     "Id": "782f7120f2dac646827273afaf8fa3f12418a4ce554462f2c5834664b0dcf796" 

9. Find out how many image layers are used to build this image.
Ans: docker inspect f0b8a9a54136
     "Layers": [
                "sha256:02c055ef67f5904019f43a41ea5f099996d8e7633749b6e606c400526b2c4b33",
                "sha256:431f409d4c5a8f79640000705665407ff22d73e043472cb1521faa6d83afc5e8",
                "sha256:4b8db2d7f35aa38ac283036f2c7a453ebfdcc8d7e83a2bf3b55bf8847f8fafaf",
                "sha256:c9732df61184e9e8d08f96c6966190c59f507d8f57ea057a4610f145c59e9bc4",
                "sha256:eeb14ff930d4c2c04ece429112c16a536985f0cba6b13fdb52b00853107ab9c4",
                "sha256:f0f30197ccf95e395bbf4efd65ec94b9219516ae5cafe989df4cf220eb1d6dfa"
            ]

10. Get the Apache Tomcat 7 server image from the docker hub.
Ans: docker pull tomcat:7.0

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
Ans: docker run -it -p 8888:8080 --name My-Tomcat e614000ce544

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
Ans: docker inspect My-Tomcat IPaddress : http://172.17.0.2:8080/

13. Which Port it is using?
Ans: 8080 on container
     8888 on Host ip

14. Try to access the Tomcat's home page from your machine/vm.
Ans: done

15. What is the disk size of Apache Tomcat image?
Ans: 532.92 MB

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
Ans: "PATH=/usr/local/tomcat/bin:/usr/local/openjdk-8/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
     "JAVA_HOME=/usr/local/openjdk-8",
     "LANG=C.UTF-8",
     "JAVA_VERSION=8u292",
     "CATALINA_HOME=/usr/local/tomcat",
     "TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib",
     "LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib"
     
   

17. Find out which port is exposed for tomcat?
Ans: 8080

18. Run multiple conntainers of tomcat on different port and access it's home page.
Ans: done

19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
Ans: docker pull ubuntu:18.04
     docker pull ubuntu:16.04

20. Run the container of ubuntu in attached mode.
Ans: docker run -it --name ubuntu-18.04 ubuntu:18.04 bash

21. Run the container of another ubuntu in detached mode.
Ans: docker run -d -it --name ubuntu-16.04 ubuntu:16.04 bash

22. Check how many ubuntu containers are running and stopped
Ans: ubuntu:16.04 is running and ubuntu:18.04 is stopped.

23. Is the tomcat container running? If no, start one.
Ans: docker start My-Tomcat

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
Ans: docker logs My-Tomcat

25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
Ans: docker exec -it ubuntu-18.04 bash

26. Login as root user in ubuntu container
Ans: yes

27. Create a file with any name in root directory
Ans: touch root/file1

28. Install software of your choice in ubuntu container using "apt-get install"
Ans: apt-get update
     apt-get install java

29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
Ans: exit

30. Check if the ubuntu container is running.
Ans: Yes running

31. Create a new ubuntu container out of the same image as that previous container in attached mode.
Ans: docker run -it --name ubuntu-duplicate ubuntu:18.04 bash

32. Login as a root user
Ans: yes

33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
Ans: No

34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
Ans: Yes, I have it

35. Create an Image out of the existing container.
Ans: docker commit 7a01b415597e vinay/ubuntu-mod:1.0

36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
Ans: docker run -it --name vin-ubuntu-mod vinay/ubuntu-mod:1.0 bash
     Yes the file and software were already installed.

37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
Ans: docker stop My-Tomcat
     docker rm My-Tomcat

38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.
Ans: docker build -t vinay/html .
     docker run -d -p 8888:8080 --name index vinay/html
     now check on localhost:8888/myapp/index.html

39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
2. -f
3. -q

write atleast 1 command using each option above and prove their concepts as described in the --help.
Ans: docker images -a/--all  (displays all images)
     docker images -f/--format string  (displays fromatted in Go template)
     docker images --no-trunc  (shows expanded output)
     docker images -q/--quite  (only displays image ids)

40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
2. -f
3. -q
4. -n
5. -l
6. -s

write atleast 1 command using each option above and prove their concepts as described in the --help.
Ans: docker ps -a/--all  (displays all containers)
     docker ps  (displays running containers)
     docker -f/--format string   (displays fromatted in Go template)
     docker -l/--latest   (shows latest containers)
     docker -q/--quiet   (displays onlt image id)
     docker -s/--size     (displays total file size)

41. Type below command:-
	docker --help

you will various sections of commands apart from options like "Managemnet Commands" and "Commands".


Write some texts below describing the use of "Management Commands".
Ans: management commands are used to..
     
	manage docker confug files
	manage containers
	manage images
	manage networks
	manage swarm nodes
	manage secret files
	manage volumes
	etc


Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.
1. cp      --> copies files/folders between container and local system
2. create  --> it creates the container but doesn't run,need to use RUN command seperately
3. export  --> exports container into .tar format
4. history --> shows history of an image
5. info    --> displays info of system
6. login   --> login to docker registry
7. logout  --> logout of docker registry
8. rename  --> rename a container
9. save    --> save is used same as export but for images save images in tar archive format
10. stats  --> displays stats
11. top    --> displays running processes of container



42. Kill all running container in one liner command.
Ans: docker kill $(docker ps -q)
43. Delete all images in one liner command.
Ans: docker rmi -f $(docker images -q)

44. Create a simple Dockerfile, build it and run it.
Ans: *********Dockerfile*********
     FROM centos:latest
     Label maintainer <admin@vinay.com> vinay
     RUN yum -y install httpd
     WORKDIR /var/www/html
     COPY html /var/www/html
     CMD ["/usr/sbin/httpd", "-D", "FOREGROUND"]
     EXPOSE 80

     building image ---> docker build -t vinay/cTOS .
     running image ----> docker run vinay/cTOS

45. Create one or more Dockerfile that demostrate the following commands in Dockerfile (Write a PoC for each in one or more Dockerfile)
	1. USER
	2. RUN
	3. ENV
	4. CMD
	5. RUN
	6. ENTRYPOINT
	7. EXPOSE
	8. VOLUME

Ans: USER vinay    #defines whi is the user of this dockerfile
     FROM centos:latest    #pulls latest centos image from dockerhub
     LABEL maintainer <admin@vinay.com> vinay     #gives extra info on who developed this dockerfile for future reference
     RUN yum -y install httpd    #RUN bash command
     ENV workdir var/www/html    #specifies the enviromeny 
     VOLUME vinay-cTOS:/data    #defines specific volume 
     WORKDIR /var/www/html      #defines working directory
     COPY index.html /var/www/html   # copies files into container
     CMD ["/usr/sbin/httpd", "-D", "FOREGROUND"]   #command execution
     EXPOSE 80     #port expose
     ENTRYPOINT ["centos"]    #entrypoint of the docker file
	
46. Dockerhub:-
	Find a application you care about on docker hub.
	Launch the container.
	Install another application in it.
	Save (commit) the image.
	Upload that to docker hub in your account and share it with a colleague, ask them to use your image and run the container out of it in their machine/vm.


Ans: docker pull ubuntu   #pulled ubuntu image from docker hub

     docker run -d -it --name MyAnsible ubuntu bash   #launched the container by running the image   
     
     docker exec -it MyAnsible bash   #entered into container

     apt-get update
     apt-get install ansible   #updated packages and installed ansible software on ubuntu container

     docker commit 6b8c69b5e912 vinay/ansible-ubuntu:latest    #committed docker container into an image

     docker login   #logged into my docker hub repository 

     docker tag vinay/ansible-ubuntu:latest vinkumban/ansible:latest    #tagged my custom image with name

     docker push vinkumban/ansible:latest    #successfully pushed my image to my docker hub repository